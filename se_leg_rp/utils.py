# -*- coding: utf-8 -*-

from uuid import uuid4
import requests
from flask import request, current_app
from se_leg_rp.exceptions import ApiException


def get_unique_hash():
    return str(uuid4())


def get_short_hash(entropy=10):
    return uuid4().hex[:entropy]


def get_user_proofing_state(authn_state):
    """
    :param authn_state: Shared state id between RP and OP
    :type authn_state: str
    :return: Proofing state document
    :rtype: eduid_userdb.proofing.OidcProofingState
    :raises ApiException
    """
    proofing_state = current_app.proofing_statedb.get_state_by_oidc_state(authn_state)
    if not proofing_state:
        msg = 'The \'state\' parameter ({}) does not match a user state.'.format(authn_state)
        current_app.logger.error(msg)
        raise ApiException(payload={'error': msg})
    current_app.logger.debug('Proofing state {} for user {} found'.format(proofing_state.state,
                                                                          proofing_state.eppn))
    return proofing_state


def check_auth_header(token):
    """
    :param token: Token generated by the RP for the auth request
    :type token: str
    :return: True
    :rtype: bool
    :raises ApiException
    """
    authorization_header = request.headers.get('Authorization')
    if authorization_header != 'Bearer {}'.format(token):
        msg = 'The authorization token ({}) did not match the expected .'.format(authorization_header)
        current_app.logger.error(msg)
        raise ApiException(payload={'error': msg})
    return True


def do_authentication_request(state, nonce, token, claims_request):
    """
    :param state: Generated state
    :type state: str
    :param nonce: Generated nonce
    :type nonce: str
    :param token: Generated token
    :type token: str
    :param claims_request: Claims that will be requested
    :type claims_request: oic.oic.message.ClaimsRequest
    :return: Http response
    :rtype: requests.models.Response
    :raises ApiException
    """
    args = {
        'client_id': current_app.oidc_client.client_id,
        'response_type': 'code',
        'scope': ['openid'],
        'redirect_uri': current_app.config['AUTHORIZATION_RESPONSE_URI'],
        'state': state,
        'nonce': nonce,
        'token': token,
        'claims': claims_request.to_json()
    }
    current_app.logger.debug('AuthenticationRequest args:')
    current_app.logger.debug(args)
    try:
        response = requests.post(current_app.oidc_client.authorization_endpoint, data=args)
    except requests.exceptions.ConnectionError as e:
        msg = 'No connection to authorization endpoint: {}'.format(e)
        current_app.logger.error(msg)
        raise ApiException(payload={'error': msg})

    current_app.logger.debug('Authentication request delivered to provider {}'.format(
        current_app.config['PROVIDER_CONFIGURATION_INFO']['issuer']))
    return response


def do_initial_token_request(auth_code, authn_state, nonce):
    """
    :param auth_code: Code from auth response
    :type auth_code: str
    :param authn_state: Shared state id between RP and OP
    :type authn_state: str
    :param nonce: Nonce generated by the RP and passed along in the QR code
    :type nonce: str
    :return: Token response
    :rtype: oic.oic.message.IdToken
    :raises ApiException
    """
    args = {
        'code': auth_code,
        'redirect_uri': current_app.config['AUTHORIZATION_RESPONSE_URI']
    }
    current_app.logger.debug('Trying to do token request: {}'.format(args))
    token_resp = current_app.oidc_client.do_access_token_request(scope='openid', state=authn_state,
                                                                 request_args=args,
                                                                 authn_method='client_secret_basic')
    current_app.logger.debug('token response received: {}'.format(token_resp))
    id_token = token_resp['id_token']
    if id_token['nonce'] != nonce:
        msg = 'The \'nonce\' parameter does not match.'
        current_app.logger.error(msg)
        raise ApiException(payload={'error': msg})
    return token_resp


def do_initial_userinfo_request(authn_state, subject):
    """
    :param authn_state: Shared state id between RP and OP
    :type authn_state: str
    :param subject: Subject claim from token response
    :type subject: str
    :return: Userinfo response
    :rtype: oic.oic.message.OpenIDSchema
    :raises ApiException
    """
    current_app.logger.debug('Trying to do userinfo request:')
    userinfo = current_app.oidc_client.do_user_info_request(method=current_app.config['USERINFO_ENDPOINT_METHOD'],
                                                            state=authn_state)
    current_app.logger.debug('userinfo received: {}'.format(userinfo))
    if userinfo['sub'] != subject:
        msg = 'The \'sub\' of userinfo does not match \'sub\' of ID Token'
        current_app.logger.error(msg)
        raise ApiException(payload={'error': msg})
    return userinfo
